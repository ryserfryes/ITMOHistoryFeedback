#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö HTML —Ñ–∞–π–ª–æ–≤ –¥–ª—è GitHub Pages
"""

import os
import shutil
from urllib.parse import quote
from main import app, LECTURERS

def safe_filename(name):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∏–º–µ–Ω–∏ –ª–µ–∫—Ç–æ—Ä–∞"""
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    safe_name = name.replace(' ', '_').replace('/', '_').replace('\\', '_')
    return safe_name

def fix_github_pages_links(html_content, current_path=""):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ GitHub Pages"""
    import re
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if current_path == "":  # –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        base_path = "./"
    elif current_path in ["lecturers", "reviews"]:  # —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        base_path = "../"
    else:  # —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–µ–∫—Ç–æ—Ä–æ–≤ (lecturers/name/)
        base_path = "../../"
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    html_content = re.sub(r'href="/static/', f'href="{base_path}static/', html_content)
    html_content = re.sub(r'src="/static/', f'src="{base_path}static/', html_content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ —Å —É—á–µ—Ç–æ–º APPLICATION_ROOT
    # –ó–∞–º–µ–Ω—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ —Å APPLICATION_ROOT –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ
    if current_path == "":
        html_content = re.sub(r'href="/ITMOHistoryFeedback/"', 'href="index.html"', html_content)
        html_content = re.sub(r'href="/ITMOHistoryFeedback/lecturers"', 'href="lecturers/"', html_content)
        html_content = re.sub(r'href="/ITMOHistoryFeedback/reviews"', 'href="reviews/"', html_content)
        # –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ –±–µ–∑ APPLICATION_ROOT
        html_content = re.sub(r'href="/"', 'href="index.html"', html_content)
        html_content = re.sub(r'href="/lecturers"', 'href="lecturers/"', html_content)
        html_content = re.sub(r'href="/reviews"', 'href="reviews/"', html_content)
    elif current_path in ["lecturers", "reviews"]:
        html_content = re.sub(r'href="/ITMOHistoryFeedback/"', 'href="../"', html_content)
        html_content = re.sub(r'href="/ITMOHistoryFeedback/lecturers"', 'href="../lecturers/"', html_content)
        html_content = re.sub(r'href="/ITMOHistoryFeedback/reviews"', 'href="../reviews/"', html_content)
        # –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ –±–µ–∑ APPLICATION_ROOT
        html_content = re.sub(r'href="/"', 'href="../"', html_content)
        html_content = re.sub(r'href="/lecturers"', 'href="../lecturers/"', html_content)
        html_content = re.sub(r'href="/reviews"', 'href="../reviews/"', html_content)
    else:  # —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–µ–∫—Ç–æ—Ä–æ–≤
        html_content = re.sub(r'href="/ITMOHistoryFeedback/"', 'href="../../"', html_content)
        html_content = re.sub(r'href="/ITMOHistoryFeedback/lecturers"', 'href="../../lecturers/"', html_content)
        html_content = re.sub(r'href="/ITMOHistoryFeedback/reviews"', 'href="../../reviews/"', html_content)
        # –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—É—Ç–∏ –±–µ–∑ APPLICATION_ROOT
        html_content = re.sub(r'href="/"', 'href="../../"', html_content)
        html_content = re.sub(r'href="/lecturers"', 'href="../../lecturers/"', html_content)
        html_content = re.sub(r'href="/reviews"', 'href="../../reviews/"', html_content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–µ–∫—Ç–æ—Ä–æ–≤
    for lecturer_name in LECTURERS.keys():
        safe_name = safe_filename(lecturer_name)
        encoded_name = quote(lecturer_name.encode('utf-8'))
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ /lecturers/–ò–º—è%20–õ–µ–∫—Ç–æ—Ä–∞ –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        pattern = f'href="/lecturers/{re.escape(encoded_name)}"'
        if current_path == "":  # —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            replacement = f'href="lecturers/{safe_name}/"'
        elif current_path == "lecturers":  # —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∞ –ª–µ–∫—Ç–æ—Ä–æ–≤
            replacement = f'href="{safe_name}/"'
        else:  # —Å –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            replacement = f'href="../{safe_name}/"'
        
        html_content = re.sub(pattern, replacement, html_content)
        
        # –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ-encoded –≤–µ—Ä—Å–∏–∏
        pattern2 = f'href="/lecturers/{re.escape(lecturer_name)}"'
        html_content = re.sub(pattern2, replacement, html_content)
    
    return html_content

def generate_static_site():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∞–π—Ç"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ø–∞–ø–∫—É docs
    if os.path.exists('docs'):
        shutil.rmtree('docs')
        print("–°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ 'docs' —É–¥–∞–ª–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    os.makedirs('docs', exist_ok=True)
    os.makedirs('docs/lecturers', exist_ok=True)
    os.makedirs('docs/reviews', exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS)
    if os.path.exists('static'):
        shutil.copytree('static', 'docs/static', dirs_exist_ok=True)
        print("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS/JS) —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
    
    with app.app_context():
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        with app.test_client() as client:
            response = client.get('/')
            html_content = response.get_data(as_text=True)
            fixed_html = fix_github_pages_links(html_content, "")
            with open('docs/index.html', 'w', encoding='utf-8') as f:
                f.write(fixed_html)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–µ–∫—Ç–æ—Ä–æ–≤
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–µ–∫—Ç–æ—Ä–æ–≤...")
        with app.test_client() as client:
            response = client.get('/lecturers')
            html_content = response.get_data(as_text=True)
            fixed_html = fix_github_pages_links(html_content, "lecturers")
            with open('docs/lecturers/index.html', 'w', encoding='utf-8') as f:
                f.write(fixed_html)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–∑—ã–≤–æ–≤
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç–∑—ã–≤–æ–≤...")
        with app.test_client() as client:
            response = client.get('/reviews')
            html_content = response.get_data(as_text=True)
            fixed_html = fix_github_pages_links(html_content, "reviews")
            with open('docs/reviews/index.html', 'w', encoding='utf-8') as f:
                f.write(fixed_html)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫—Ç–æ—Ä–∞
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ª–µ–∫—Ç–æ—Ä–æ–≤...")
        for lecturer_name in LECTURERS.keys():
            safe_name = safe_filename(lecturer_name)
            lecturer_dir = f'docs/lecturers/{safe_name}'
            os.makedirs(lecturer_dir, exist_ok=True)
            
            with app.test_client() as client:
                response = client.get(f'/lecturers/{lecturer_name}')
                if response.status_code == 200:
                    html_content = response.get_data(as_text=True)
                    fixed_html = fix_github_pages_links(html_content, f"lecturers/{safe_name}")
                    with open(f'{lecturer_dir}/index.html', 'w', encoding='utf-8') as f:
                        f.write(fixed_html)
                    print(f"  ‚úì {lecturer_name}")
                else:
                    print(f"  ‚úó –û—à–∏–±–∫–∞ –¥–ª—è {lecturer_name}: {response.status_code}")
    
    print("\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for root, dirs, files in os.walk('docs'):
        level = root.replace('docs', '').count(os.sep)
        indent = '  ' * level
        print(f"{indent}{os.path.basename(root)}/")
        subindent = '  ' * (level + 1)
        for file in files:
            print(f"{subindent}{file}")

def create_url_mapping():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª —Å –º–∞–ø–ø–∏–Ω–≥–æ–º URL –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    mapping = {}
    for lecturer_name in LECTURERS.keys():
        safe_name = safe_filename(lecturer_name)
        mapping[lecturer_name] = safe_name
    
    # –°–æ–∑–¥–∞–µ–º JavaScript —Ñ–∞–π–ª —Å –º–∞–ø–ø–∏–Ω–≥–æ–º
    js_content = f"""
// URL mapping for GitHub Pages
const URL_MAPPING = {str(mapping).replace("'", '"')};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL –ª–µ–∫—Ç–æ—Ä–∞
function getLecturerUrl(lecturerName) {{
    const safeName = URL_MAPPING[lecturerName];
    return safeName ? `lecturers/${{safeName}}/` : '#';
}}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–µ–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {{
    const lecturerLinks = document.querySelectorAll('a[href*="/lecturers/"]');
    lecturerLinks.forEach(link => {{
        const href = link.getAttribute('href');
        const lecturerName = decodeURIComponent(href.split('/lecturers/')[1]);
        const newUrl = getLecturerUrl(lecturerName);
        if (newUrl !== '#') {{
            link.setAttribute('href', newUrl);
        }}
    }});
}});
"""
    
    with open('docs/static/url-mapping.js', 'w', encoding='utf-8') as f:
        f.write(js_content)
    
    print("üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –º–∞–ø–ø–∏–Ω–≥–∞ URL")

if __name__ == '__main__':
    generate_static_site()
    create_url_mapping()
    print("\nüöÄ –°–∞–π—Ç –≥–æ—Ç–æ–≤ –¥–ª—è GitHub Pages!")
    print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ 'docs' –≤ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
    print("2. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤–∫–ª—é—á–∏—Ç–µ GitHub Pages –∏–∑ –ø–∞–ø–∫–∏ 'docs'")
    print("3. –í–∞—à —Å–∞–π—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://[username].github.io/[repo-name]/")