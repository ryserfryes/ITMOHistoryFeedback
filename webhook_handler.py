#!/usr/bin/env python3
"""
Webhook handler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã
–ú–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ Heroku, Railway, Vercel –∏–ª–∏ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–∏—Å–µ
"""

from flask import Flask, request, jsonify
import requests
import json
import os
from datetime import datetime

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN", "YOUR_GITHUB_TOKEN")
GITHUB_REPO = os.environ.get("GITHUB_REPO", "username/repo-name")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
GITHUB_API_URL = f"https://api.github.com/repos/{GITHUB_REPO}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã
YANDEX_FORM_ID = "68713abe90fa7b9f66ab5c53"  # ID –≤–∞—à–µ–π —Ñ–æ—Ä–º—ã
YANDEX_API_TOKEN = os.environ.get("YANDEX_API_TOKEN", "YOUR_YANDEX_TOKEN")

@app.route('/webhook/yandex-form', methods=['POST'])
def handle_yandex_webhook():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç JSON-RPC webhook –æ—Ç –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º JSON-RPC –¥–∞–Ω–Ω—ã–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã
        webhook_data = request.json
        print(f"–ü–æ–ª—É—á–µ–Ω JSON-RPC webhook: {json.dumps(webhook_data, indent=2, ensure_ascii=False)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON-RPC –∑–∞–ø—Ä–æ—Å
        if not webhook_data or 'method' not in webhook_data:
            return jsonify({"error": "Invalid JSON-RPC request"}), 400
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
        method = webhook_data.get('method')
        params = webhook_data.get('params', {})
        
        if method == 'form.response.created':
            print("üÜï –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ä–º—É!")
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–∞–π—Ç
            success = update_site_data()
            
            if success:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π JSON-RPC –æ—Ç–≤–µ—Ç
                return jsonify({
                    "jsonrpc": "2.0",
                    "result": {"status": "success", "message": "Site updated successfully"},
                    "id": webhook_data.get('id')
                })
            else:
                return jsonify({
                    "jsonrpc": "2.0",
                    "error": {"code": -1, "message": "Failed to update site"},
                    "id": webhook_data.get('id')
                }), 500
        
        elif method == 'form.response.updated':
            print("‚úèÔ∏è –û—Ç–≤–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
            success = update_site_data()
            return jsonify({
                "jsonrpc": "2.0",
                "result": {"status": "success", "message": "Site updated after response update"},
                "id": webhook_data.get('id')
            })
        
        else:
            print(f"‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {method}")
            return jsonify({
                "jsonrpc": "2.0",
                "result": {"status": "ignored", "message": f"Method {method} not handled"},
                "id": webhook_data.get('id')
            })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return jsonify({
            "jsonrpc": "2.0",
            "error": {"code": -32603, "message": f"Internal error: {str(e)}"},
            "id": webhook_data.get('id') if webhook_data else None
        }), 500

def update_site_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∞–π—Ç"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        form_data = download_yandex_form_data()
        if not form_data:
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –≤ GitHub
        success = update_github_data_file(form_data)
        if not success:
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º GitHub Action –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∞–π—Ç–∞
        trigger_github_action()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def download_yandex_form_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã —á–µ—Ä–µ–∑ API"""
    if YANDEX_API_TOKEN == "YOUR_YANDEX_TOKEN":
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    try:
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Ñ–æ—Ä–º—ã
        url = f"https://api.forms.yandex.ru/v1/forms/{YANDEX_FORM_ID}/responses"
        headers = {
            'Authorization': f'Bearer {YANDEX_API_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã...")
        response = requests.get(url, headers=headers)
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data.get('responses', []))} –æ—Ç–≤–µ—Ç–æ–≤")
            return convert_yandex_to_current_format(data)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã: {response.status_code}")
            print(response.text)
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def convert_yandex_to_current_format(yandex_data):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ API –Ø–Ω–¥–µ–∫—Å.–§–æ—Ä–º—ã –≤ —Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç"""
    converted_data = []
    
    if 'responses' in yandex_data:
        for response in yandex_data['responses']:
            converted_response = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
            converted_response.append(['ID', str(response.get('id', ''))])
            converted_response.append(['–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è', response.get('created_at', '')])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            if 'answers' in response:
                for answer in response['answers']:
                    question_text = answer.get('question', {}).get('text', '')
                    answer_value = answer.get('value', '')
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
                    if isinstance(answer_value, list):
                        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                        for value in answer_value:
                            converted_response.append([question_text, str(value)])
                    else:
                        converted_response.append([question_text, str(answer_value)])
            
            converted_data.append(converted_response)
    
    return converted_data

def update_github_data_file(data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
    if GITHUB_TOKEN == "YOUR_GITHUB_TOKEN":
        print("‚ö†Ô∏è GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        headers = {
            'Authorization': f'token {GITHUB_TOKEN}',
            'Accept': 'application/vnd.github.v3+json'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è SHA
        file_path = 'data/fidbek po istorii.json'
        get_url = f"{GITHUB_API_URL}/contents/{file_path}"
        
        get_response = requests.get(get_url, headers=headers)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import base64
        new_content = json.dumps(data, ensure_ascii=False, indent=2)
        encoded_content = base64.b64encode(new_content.encode('utf-8')).decode('utf-8')
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        update_data = {
            'message': f'Auto-update form data - {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}',
            'content': encoded_content,
            'branch': 'main'
        }
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º SHA
        if get_response.status_code == 200:
            current_file = get_response.json()
            update_data['sha'] = current_file['sha']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        put_response = requests.put(get_url, headers=headers, json=update_data)
        
        if put_response.status_code in [200, 201]:
            print("‚úÖ –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω –≤ GitHub")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {put_response.status_code}")
            print(put_response.text)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GitHub: {e}")
        return False

def trigger_github_action():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç GitHub Action –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–π—Ç–∞"""
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    
    data = {
        'event_type': 'update-site',
        'client_payload': {
            'timestamp': str(datetime.now())
        }
    }
    
    response = requests.post(
        f"{GITHUB_API_URL}/dispatches",
        headers=headers,
        json=data
    )
    
    if response.status_code == 204:
        print("‚úÖ GitHub Action –∑–∞–ø—É—â–µ–Ω")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GitHub Action: {response.status_code}")
        return False

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    return jsonify({"status": "ok"})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)